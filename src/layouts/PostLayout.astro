---
import Layout from './Layout.astro'
import '../styles/post.css'

let { frontmatter } = Astro.props
---

<Layout title={`Austin Crim | ${frontmatter.title}`}>
  <meta
    name="description"
    content={frontmatter.title + ' | ' + frontmatter.lede}
    slot="og"
  />
  <meta name="og:title" content={frontmatter.title} slot="og" />
  <meta
    name="og:image"
    content={`https://austincrim.com/og/${frontmatter.slug}.png`}
    slot="og"
  />
  <meta
    name="og:url"
    content={`https://austincrim.com/${frontmatter.slug}`}
    slot="og"
  />

  <article class="flex flex-col justify-around my-16 gap-16">
    <div
      style={`view-transition-name: ${frontmatter.slug}`}
      class="gradient-container sm:rounded-xl sm:p-1 sm:mx-0 py-1 -mx-10 shadow-md"
    >
      <div
        class="flex flex-col space-y-4 heading p-10 bg-white dark:bg-slate-800 bg-opacity-60 sm:rounded-lg text-slate-600"
      >
        <h1
          style={`view-transition-name: ${frontmatter.slug}-title`}
          class="inline text-3xl w-fit text-slate-700 dark:text-slate-200"
        >
          {frontmatter.title}
        </h1>
        <span
          class="text-lg w-fit text-slate-700 dark:text-slate-300"
          style={`view-transition-name: ${frontmatter.slug}-lede`}
          >{frontmatter.lede}</span
        >
        <span
          class="text-slate-700 dark:text-slate-300 w-fit"
          style={`view-transition-name: ${frontmatter.slug}-date`}
        >
          {frontmatter.datePublished.toLocaleDateString('en-US')}
        </span>
      </div>
    </div>
    <div
      class="leading-loose prose max-w-none prose-code:break-words dark:text-slate-200 dark:prose-headings:text-slate-200 dark:prose-code:text-slate-200 dark:prose-a:text-blue-300 dark:prose-strong:text-slate-200 article text-lg"
    >
      <slot />
    </div>
  </article>
</Layout>

<!-- <script>
  let headingEls = document.querySelectorAll('h2[id]')
  let tocEls = Array.from(document.querySelectorAll('.heading-toc'))
  let activeHeading

  let observer = new IntersectionObserver(
    (entries) => {
      for (let entry of entries) {
        if (entry.isIntersecting) {
          if (activeHeading) {
            activeHeading.classList.remove('font-semibold', 'text-gray-900')
          }
          activeHeading = tocEls.find(
            (toc) => toc.getAttribute('href') === `#${entry.target.id}`
          )

          activeHeading.classList.add('font-semibold', 'text-gray-900')
        }
      }
    },
    {
      threshold: 1,
      rootMargin: `0% 0% -50% 0%`
    }
  )
  headingEls.forEach((el) => observer.observe(el))
</script> -->
